name: Provision Environment on Issue Open via ArgoCD Crossplane
run-name: Provision or Update Dev Env on Issue ${{ github.event.issue.number }} for ${{ github.actor }}

on:
  workflow_call:
    secrets:
      azure_credentials:
        required: true
    inputs:
      app_name:
        required: true
        type: string
      region:
        required: true
        type: string
      environment_type:
        required: true
        type: string
      unique_id:
        required: true
        type: string
      repository:
        required: true
        type: string
      issue_number:
        required: true
        type: string
      run_id:
        required: true
        type: string

jobs:
  provision:
    runs-on: self-hosted
    permissions:
      contents: write
      pull-requests: write
      issues: write
    outputs:
      branch_name: ${{ steps.set_branch_name.outputs.branch_name }}

    steps:
      # Step 1: Checkout the repository
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: main
          fetch-depth: 0

      # Step 2: Set up Git
      - name: Set up Git
        run: |
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"

      # Step 3: Set branch name
      - name: Set branch name
        id: set_branch_name
        run: echo "branch_name=create-dev-env-${{ github.actor }}-${{ github.event.issue.number }}" >> $GITHUB_OUTPUT

      # Step 4: Create and switch to a new branch
      - name: Create and switch to a new branch
        run: |
          git checkout -b ${{ steps.set_branch_name.outputs.branch_name }}

      # Step 5: Create or update the DevEnvironment file
      - name: Create or Update DevEnvironment File
        run: |
          export FILE_PATH="infrastructure/azure/dev-envs/dev-env-${{ github.actor }}-${{ github.event.issue.number }}.yaml"
          export TEMPLATE_PATH="infrastructure/azure/resources-samples/dev-env-template.yaml"
          export REGION="${{ inputs.region }}"
          export RESOURCE_GROUP="env-${{ github.actor }}-${{ github.event.issue.number }}-rg"
          export STORAGE_ACCOUNT_NAME="$(LC_ALL=C tr -dc 'a-z0-9' < /dev/urandom | head -c 16)"
          export GITHUB_EVENT_ISSUE_NUMBER="${{ inputs.issue_number }}"
          export GITHUB_ACTOR="${{ github.actor }}"
          
          mkdir -p "$(dirname "$FILE_PATH")"
          envsubst < "$TEMPLATE_PATH" > "$FILE_PATH"

          echo "Created file at: $FILE_PATH"
          cat "$FILE_PATH"

      # Step 6: Stage and commit the file
      - name: Commit changes
        run: |
          git add infrastructure/azure/dev-envs/dev-env-${{ github.actor }}-${{ github.event.issue.number }}.yaml
          git commit -m "Add DevEnvironment file for ${{ github.actor }} (Issue #${{ github.event.issue.number }})"

      # Step 7: Push the branch to GitHub
      - name: Push changes
        run: |
          git push --set-upstream origin ${{ steps.set_branch_name.outputs.branch_name }}

      # Step 8: Verify branch state
      - name: Verify branch state
        run: |
          echo "Verifying branch state on remote..."
          git fetch origin
          git log origin/${{ steps.set_branch_name.outputs.branch_name }} --oneline

      # Step 9: Create Pull Request Using GitHub API
      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          BRANCH_NAME: ${{ steps.set_branch_name.outputs.branch_name }}
          PR_TITLE: "Dev environment for ${{ github.actor }} (Issue #${{ github.event.issue.number }})"
          PR_BODY: |
            This PR adds a new or updated DevEnvironment file for #${{ github.event.issue.number }}.
            Once merged, ArgoCD will deploy or update the environment.
        run: |
          # Extract owner and repo from GITHUB_REPOSITORY
          IFS='/' read -r owner repo <<< "$GITHUB_REPOSITORY"

          # Create JSON payload for the pull request
          read -r -d '' payload <<EOF
          {
            "title": "$PR_TITLE",
            "head": "$BRANCH_NAME",
            "base": "main",
            "body": "$PR_BODY",
            "draft": false
          }
          EOF

          # Make the API request to create the pull request
          response=$(curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$owner/$repo/pulls \
            -d "$payload")

          # Check if the pull request was created successfully
          if echo "$response" | grep -q '"html_url":'; then
            PR_URL=$(echo "$response" | grep '"html_url":' | sed -E 's/.*"html_url": "([^"]+)".*/\1/')
            echo "Pull request created successfully: $PR_URL"
          else
            echo "Failed to create pull request:"
            echo "$response"
            exit 1
          fi
