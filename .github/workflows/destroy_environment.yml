name: Destroy Environment on Issue Close
run-name: Destroy Environment on Issue ${{ github.event.issue.number }} for ${{ github.actor }}

on:
  issues:
    types: [closed]

jobs:
  get_issue_details:
    runs-on: self-hosted
    permissions:
      issues: write
    outputs:
      app_name: ${{ steps.parse_issue.outputs.app_name }}
      environment_type: ${{ steps.parse_issue.outputs.environment_type }}

    steps:
        
      - name: Comment on Issue with Cleanup Start
        run: |
          curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"body": "üå∂Ô∏è @${{ github.actor }} Environment submitted for deletion."}' \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"

      - name: Parse Issue Details
        id: parse_issue
        run: |
          # Extract app_name from the issue body using awk
          body="${{ github.event.issue.body }}"
          app_name=$(echo "$body" | awk '/>>app_name<</{getline; getline; print}')
          environment_type=$(echo "$body" | awk '/>>environment_type<</{getline; getline; print}')

          if [[ -z "$app_name" || -z "$environment_type" ]]; then
            echo "Error: Failed to parse issue details." >&2
            exit 1
          fi
          echo "app_name=$app_name" >> $GITHUB_ENV
          echo "environment_type=$environment_type" >> $GITHUB_ENV
  
  cleanup_azure:
    needs: get_issue_details
    runs-on: self-hosted
    permissions:
      issues: write
    if: needs.get_issue_details.outputs.environment_type != 'dev_env'
    steps:
      - name: Set up Azure CLI with Azure Login v2
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Find and Delete Resource Group
        run: |
          # Find the resource group by searching for the Issue ID tag
          issue_url="https://github.com/${{ github.repository }}/issues/${{ github.event.issue.number }}"
          resource_group_name=$(az group list --tag "Issue ID=$issue_url" --query "[0].name" -o tsv)
          
          if [[ -z "$resource_group_name" ]]; then
            echo "Error: No resource group found with the specified Issue ID tag." >&2
            exit 1
          fi

          # Delete the resource group
          az group delete --name "$resource_group_name" --yes --no-wait

          echo "resource_group_name=$resource_group_name" >> $GITHUB_ENV
          
  cleanup_crossplane:
    needs: get_issue_details
    runs-on: self-hosted
    permissions:
      contents: write
      pull-requests: write
      issues: write
    if: needs.get_issue_details.outputs.environment_type == 'dev_env'
    steps:
      # Step 1: Checkout the repository
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: main
          fetch-depth: 0

      # Step 2: Set up Git
      - name: Set up Git
        run: |
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"

      # Step 3: Set branch name
      - name: Set branch name
        id: set_branch_name
        run: echo "branch_name=delete-dev-env-${{ github.actor }}-${{ github.event.issue.number }}" >> $GITHUB_OUTPUT

      # Step 4: Create and switch to a new branch
      - name: Create and switch to a new branch
        run: |
          git checkout -b ${{ steps.set_branch_name.outputs.branch_name }}
      
      # Step 5: Delete the dev environment yaml file
      - name: Move to trash DevEnvironment file
        env:
            GH_TOKEN: ${{ github.token }}
        run: |
          FILE_PATH="infrastructure/azure/dev-envs/dev-env-${{ github.actor }}-${{ github.event.issue.number }}.yaml"
          DEST_PATH="infrastructure/azure/dev-envs/trash/dev-env-${{ github.actor }}-${{ github.event.issue.number }}.yaml"
          mkdir -p "$(dirname $DEST_PATH)"
          if [ -f "$FILE_PATH" ]; then
            echo "Deleting DevEnvironment file: $FILE_PATH"
            mv "$FILE_PATH" "$DEST_PATH"
            git add .
            git commit -m "Moved DevEnvironment file for ${{ github.actor }}-${{ github.event.issue.number }}"
            git push --set-upstream origin ${{ steps.set_branch_name.outputs.branch_name }}

            PR_TITLE="Delete DevEnvironment for ${{ github.actor }}-${{ github.event.issue.number }}"
            PR_BODY="This PR deletes the DevEnvironment file for ${{ github.actor }}-${{ github.event.issue.number }}. Once approved, the environment will be cleaned up automatically with ArgoCD."

            gh pr create --title "$PR_TITLE" --body "$PR_BODY" --base main --head ${{ steps.set_branch_name.outputs.branch_name }} --repo ${{ github.repository }} --draft=false
          fi

  comment_completion:
    needs: [get_issue_details, cleanup_azure, cleanup_crossplane]
    runs-on: self-hosted
    permissions:
      issues: write
      contents: read
    if: always()
    steps:
      - name: Comment on Issue to Indicate Completion or Failure
        run: |
          #check environement type and comment accordingly
          if [[ "${{ needs.get_issue_details.outputs.environment_type }}" == "dev_env" ]]; then
            comment="üóëÔ∏è Dev Environment for @${{ github.actor }} has been submitted for deletion . \n\n üóëÔ∏è Dev Environment file has been moved to trash. \n\n üîÑ A pull request has been created to delete the Dev Environment file."
          else
            comment="üóëÔ∏è Environment name `${{ needs.get_issue_details.outputs.app_name }}` has been successfully cleaned up. \n\n ‚ùå Resource group `${{ env.resource_group_name }}` has been deleted."
          fi
          # Post the comment back to the GitHub Issue
          
          curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{\"body\": \"$comment\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"